name: CI

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

jobs:
  run-python-tests:
    runs-on: ubuntu-latest

    env:
      MIN_TEST_COV: 65

    steps:
      - uses: actions/checkout@v4

      - name: Python setup
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: Install dependencies
        run: |
          pip install -r backend/requirements.txt -r backend/requirements.dev.txt
          pip install pytest-cov
          pip install flake8

      - name: Run flake8 checks
        run: flake8 `find backend/ -name *.py`

      - name: Run python tests
        run: PYTHONPATH=. pytest --cov=. --cov-fail-under=$MIN_TEST_COV

  deploy-docker-image:
    runs-on: ubuntu-latest
    environment: production
    needs: run-python-tests
    if: github.ref == 'refs/heads/master'

    steps:
      - uses: actions/checkout@v4

      - name: set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_LOGIN }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          context: ./backend/
          push: true
          tags: ${{ secrets.DOCKERHUB_LOGIN }}/microblog-backend:${{ github.run_number }}

  deploy-python-build:
    runs-on: ubuntu-latest
    environment: production
    needs: run-python-tests
    if: github.ref == 'refs/heads/master'

    defaults:
      run:
        working-directory: ./backend

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Python setup
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - run: pip install -U wheel twine setuptools setuptools-scm

      - name: Build from sources
        run: |
          python3.11 setup.py bdist_wheel
          python3.11 setup.py sdist

      - name: Deploy build
        run: |
          twine upload \
            -u ${{ secrets.PYPI_USERNAME }} \
            -p ${{ secrets.PYPI_PASSWORD }} \
            --repository-url ${{ secrets.PYPI_REPOSITORY_URL }} \
            --non-interactive \
            dist/*

  run-jest-tests:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v3
        with:
          node-version: "18"

      - name: Run jest tests
        run: |
          npm install
          npm run test -- --watchAll=false
